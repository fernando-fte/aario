# função enviar para php #
$.submt_post = (value) ->
    # value = valores para conexao e busca no banco
    $.ajax(
        type: "post"
        url: "http://192.168.10.106/json/assets/php/json.php"
        cache: false
        #dataType: "json"
        data: value
        async: false
    )
    .done (data) ->
        value = data
        # console.log data
    return eval(value)

$.parser_values_request = (me, data, val) -> #recebe função
    # me   = html na arvore down
    # data = valor unico para tipo de campo
    # val  = valor a ser acrecentado conforme "data" ou a 
    #        solicitação do reconhecimento do campo

    f_parser_values_request = (value) ->

        switch value.type # quando o valor
            # processa valor e preenche o local indicado
            # ou retorna o valor do local indicado

            when "text" # quando o tipo for texto
                value.me.html(value.val) if !value.return
                return me.html() if value.return

            when "url" # quando for uma url
                value.me.attr("href":value.val) if !value.return
                return value.me.attr("href") if value.return

            when "href" # quando for uma url
                value.me.attr("href":value.val) if !value.return
                return value.me.attr("href") if value.return

            when "title" # quando for title
                value.me.attr("title":value.val) if !value.return
                return value.me.attr("title") if value.return

            when "alt" # quando for titulo de link
                value.me.attr("alt":value.val) if !value.return
                return value.me.attr("alt") if value.return

            when "src" # quando for um link
                value.me.attr("src":value.val) if !value.return
                return value.me.attr("src") if value.return

            when "input" # quando for u texto de input
                value.me.attr("value":value.val) if !value.return
                return me.attr("value") if val.return

            when "chenge" # quando for u texto de input            
                value.me.attr("value":value.val) if !value.return
                return value.me.attr("value") if value.return

            when "class" # quando for uma classe
                value.me.addClass(value.val) if val.return
                value.me.data("template-request-class", value.val) if !value.return
                value.me.data("template-request-class")[value.return] if value.return

            when "template-toogle" # quando for um toogle
                value.me.data("template-request-toogle", value.val) if !value.return
                value.me.data("template-request-toogle")[value.return] if value.return


    # cria object trasportador de valores
    process =  {}


    # caso não seja uma sequencia de valores objects
    if !data or (!data+'') is '[object Object]' #quando val: objeto
        # adiciono em return o valor
        process.return = data if data
        process.return = {} if !data
        process.type = val
        process.me

        # processo os valores na sub-função
        f_parser_values_request process

    else

        # Recebe e copila os valores para a sincronia
        copila = $.extract_object_value data, {"valida":val}

        count = 0
        while count < copila.length
            $.each copila[count], (key, val) ->
                # definições para os valores
                process.me  = me
                process.type = key
                process.val = val

                # processo os valores na sub-função
                f_parser_values_request process

            # acrecento no loop
            count++




$.extract_object_value = (data, parametro) ->
    # deve ser passado dois valores, um data e outro parametro sendo este relativo
    # caso não exista parametro comparativo será retornado o valor de data como uma lista
    # se houver parametro valida deve ser retornar um valor em lista com o valor -> a:b

    # exemplos de uso
    # banco = {"oi":"a", "1":{"1.1":{"1.1.1":"res 1.1.1 - banco"}, "1.2":{"1.2.1":"res 1.2.1 - banco"}}, "2":{"2.1":{"2.1.1":"res 2.1.1 - banco"}, "2.2":{"2.2.2":"res 2.2.1 - banco"}}}
    # value = {"1.1.1":"text"}
    # key = {"oi":"a", "1":{"1.1":{"1.1.1":"res 1.1.1 - banco"}}}


    # # # console.log banco
    # # console.log $.extract_object_value {object:banco}, {"valida":key}
    # # console.log $.extract_object_value {object:banco}, {"key":key}
    # # console.log $.extract_object_value {object:banco}, {"estrutura"}
    # # console.log $.extract_object_value {object:banco}, {}


    # sub função para a validação do tipo de exceução
    f_excecao = (key) ->
        switch key
            when "template-toogle"
                return false
            else
                return true
        
    #cria data.object quando não houver
    if !data.object
        temp = data
        data = {"object":data}

    # console.log parametro

    #entra no loop
    $.each data.object, (key, val) ->
        #verifica se é um objeto
        if (val+'') is '[object Object]' #quando val: objeto

            # valida se pode ser processado
            _return = f_excecao key

            # retorno o valor de template-toogle direto ao return
            if key is 'template-toogle'
                temp = {}
                temp[key] = parametro.valida[key]

                data.return.push temp

            # caso passe na validação
            if _return

                #aplica em data.object o "val"
                parametro_ = {}
                data.object = val # if !data.parametro.parametroaracao
                # # #

                # cria novo parametro
                parametro_ = {} if parametro.valida
                parametro_.valida = parametro.valida[key] if parametro.valida && parametro.valida[key]
                parametro_.valida = {} if parametro.valida && !parametro.valida[key]
                # # #

                # cria novo parametro par keys
                parametro_ = {} if parametro.key
                parametro_.key = parametro.key[key] if parametro.key && parametro.key[key]
                parametro_.key = {} if parametro.key && !parametro.key[key]
                # # #

                # retornando valor na arvore de acesso
                parametro_ = {} if parametro.estrutura
                parametro_.estrutura = {} if parametro.estrutura # define novo parametro
                parametro_.estrutura = parametro.estrutura+'["'+key+'"]' if parametro.estrutura # controi a arvore de acesso
                parametro_.estrutura = '["'+key+'"]' if parametro.estrutura && parametro.estrutura is 'estrutura'
                # # #

                #Retorna todos os valores a uma NOVA FUNCAO
                $.extract_object_value data, parametro_

        else
            # cria data.return caso não exista
            data.return = [] if !data.return


            # cria objeto para retornar a estrutura
            parametro.estrutura = parametro.estrutura+'["'+key+'"]' if parametro.estrutura # controi a arvore de acesso
            parametro.estrutura = '["'+key+'"]' if parametro.estrutura is ('estrutura["'+key+'"]') or parametro.estrutura is ''  # retorna apenas o primeiro valor

            # cria objeto em temp para preencher em data.return
            temp = {} if parametro.valida && parametro.valida[key]
            temp[val] = parametro.valida[key] if parametro.valida && parametro.valida[key]

            # cria objeto em temp para preencher em data.return
            temp = {} if parametro.key && parametro.key[key]
            temp[key] = val if parametro.key && parametro.key[key]




            # adiciona em return o valor da ultima chave
            data.return.push temp if parametro.key && parametro.key[key]

            # adiciona em return o valor quando comparado sendo A|B A∩B
            data.return.push temp if parametro.valida && parametro.valida[key]
            
            # adiciona a estrutura em push
            data.return.push parametro.estrutura if parametro.estrutura

            # adiciona em return a lista de valores
            data.return.push val if !parametro.valida && !parametro.estrutura && !parametro.key

    # retorna os valors
    return data.return





$.pull_values = (html) ->
    #console.log html
    # este é o html a ser processado
    # exc.: $.pull_values $(document)
    # que vai retornar um object do documento


    ## DEFINO OBJETOS GLOBAIS ##
    # temp
    temp = {}

    #determino temp i
    temp.position = 0

    # defino contador
    temp.count = {}

    # crio objeto template
    pull = {}
    ## DEFINO OBJETOS GLOBAIS ##
    ############################

    # conto quantas incidencias de data-template existem e adiciono em .count
    pull.count = html.find("[data-template]").size()


    # loop pegando cada ocorrencia
    while temp['position'] < pull.count
        /// Define os parametros para o processamento dos dados ///
        ## define objeto atual ##
        pull[temp['position']] = {} # define template na posição atual
        pull[temp['position']].pull = {} # define template.pull na posição atual
        ## define objeto atual ##

        # defino em this no momento atual o data-template
        pull[temp['position']].this = html.find("[data-template]").eq(temp['position'])
        
        #define que a conexao tem o proposito apenas de selecionar o banco
        pull[temp['position']].pull.type = 'select' # seleciona

        #seleciono os dados para conexao
        pull[temp['position']].pull.table  = pull[temp['position']].this.data("pull-table")  # tabela
        pull[temp['position']].pull.select = pull[temp['position']].this.data("pull-select") # parametros

        # defino o valor em data o tipo de template /child/me/gallery/
        pull[temp['position']].data = pull[temp['position']].this.data("template")

        # valida o tipo de solicitação quando vier de um update
        if pull[temp['position']].this.data('push') # caso seja de um formulário tipo data-push
            if pull[temp['position']].this.data('push').type # caso exista type
                # loop para aplicar conforme a solicitação (update|recuver)
                pull[temp['position']].pull.status = pull[temp['position']].this.data('push').type

        /// Define os parametros para o processamento dos dados ///


        # QUANDO EM MIM #
        if pull[temp['position']].data is "me"
            #seleciono banco de dados
            temp['return'] = $.submt_post pull[temp['position']].pull

            #defino os objetos a ser preenchidos
            pull[temp['position']].this.values = pull[temp['position']].this.data('template-value')

            # valida se foi recebido algo do php, para processar os valores
            if temp['return']
                #repasso apra a função processar e aplicar os valores
                $.parser_values_request pull[temp['position']].this, pull[temp['position']].this.values, temp['return']['0']


        # QUANDO EM MEU FILHO #
        else if pull[temp['position']].data is "child"

            temp['return'] = $.submt_post pull[temp['position']].pull

            #console.log temp['return']['0']

            # seleciono onde vaiser acrecentado os dados
            pull[temp['position']].childs = {} # define template.values para valor de cada item

            # defino os objetos a ser preenchidos
            pull[temp['position']].childs.contents = pull[temp['position']].this.find('[data-template-value]')

            # conto quantas incidencias
            pull[temp['position']].childs.count = pull[temp['position']].childs.contents.size()

            #defino position apartir de mim
            temp['count'][temp['position']] = 0 # acrecento em zero

            while temp['count'][temp['position']] < pull[temp['position']].childs.count
                # defino child em this no momento atual
                pull[temp['position']].childs.contents[temp['count'][temp['position']]].this = pull[temp['position']].childs.contents.eq(temp['count'][temp['position']])

                # defino values de child.this
                pull[temp['position']].childs.contents[temp['count'][temp['position']]].values = pull[temp['position']].childs.contents[temp['count'][temp['position']]].this.data("template-value")

                # valida se foi recebido algo do php, para processar os valores
                if temp['return']

                    #repasso apra a função processar e aplicar os valores
                    $.parser_values_request pull[temp['position']].childs.contents[temp['count'][temp['position']]].this, pull[temp['position']].childs.contents[temp['count'][temp['position']]].values, temp['return']['0']

                #acrecento nesta posicao
                temp['count'][temp['position']]++

            delete temp['return']


        # QUANDO GALERIA #
        else if pull[temp['position']].data is "gallery"
            #seleciono os dados para conexao
            pull[temp['position']].pull.regra  = {"limit":""} # limite de respostas

            #seleciono banco de dados
            temp['return'] = $.submt_post pull[temp['position']].pull

            # acrecento em count zero na posicao atual
            temp['count'][temp['position']] = 0 # acrecento em zero

            #defino objeto a ser duplicado como item de galeria
            pull[temp['position']].gallery = {}
            pull[temp['position']].gallery.contents = pull[temp['position']].this.find("[data-template-gallery]")

            # loop para duplicar os itens da galeria #
            while temp['count'][temp['position']] < (temp['return'].length-1)

                #clono template-gallery
                (pull[temp['position']].gallery.contents).clone().appendTo(pull[temp['position']].this)
                
                #adiciono ao final do loop
                temp['count'][temp['position']]++ 
                # fim de loop


            ## preencho os conteudos de cada galeria ##
            #redefino que count naposicao atual e um objeto
            temp['count'][temp['position']] = {}
            # defino que count tem galery
            temp['count'][temp['position']]['gallery'] = 0 # acrecento em zero

            # redefino galeria todos os galery
            pull[temp['position']].gallery = {}
            pull[temp['position']].gallery = pull[temp['position']].this.find("[data-template-gallery]")

            # loop para gallery, selecionando cada incidente
            while temp['count'][temp['position']]['gallery'] < temp['return'].length

                #defino em this eu no momento atual
                pull[temp['position']].gallery.this = pull[temp['position']].gallery.eq(temp['count'][temp['position']]['gallery'])

                # defino em contents filhos
                pull[temp['position']].gallery.childs = {}

                # defino conteudo de filhos
                pull[temp['position']].gallery.childs.contents = pull[temp['position']].gallery.this.find("[data-template-value]")
                pull[temp['position']].gallery.childs.count    = pull[temp['position']].gallery.childs.contents.size()
                
                # defino contador em child
                temp['count'][temp['position']]['child'] = 0

                # loop para definir padores de cada filho
                while temp['count'][temp['position']]['child'] < pull[temp['position']].gallery.childs.count

                    # defino child em this no momento atual
                    pull[temp['position']].gallery.childs.contents[temp['count'][temp['position']]['child']].this = pull[temp['position']].gallery.childs.contents.eq(temp['count'][temp['position']]['child'])

                    # defino values de child.this
                    pull[temp['position']].gallery.childs.contents[temp['count'][temp['position']]['child']].values = pull[temp['position']].gallery.childs.contents[temp['count'][temp['position']]['child']].this.data("template-value")

                    # repasso para a função preencher os dados
                    $.parser_values_request pull[temp['position']].gallery.childs.contents[temp['count'][temp['position']]['child']].this, pull[temp['position']].gallery.childs.contents[temp['count'][temp['position']]['child']].values, temp['return'][temp['count'][temp['position']]['gallery']]

                    # acrecento no contador de filhos
                    temp['count'][temp['position']]['child']++

                # acrecento no contador de galeria
                temp['count'][temp['position']]['gallery']++

        temp['position']++ #adiciono ao final do loop

